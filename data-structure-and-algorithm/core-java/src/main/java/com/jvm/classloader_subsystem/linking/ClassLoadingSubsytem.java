package com.jvm.classloader_subsystem.linking;

import com.jvm.Student;

public class ClassLoadingSubsytem {

	public static void main(String[] args) {
		
		
		/* when .class loaded by Class loading subsystem
		 * 1. Loading > 2. Linking > 3. Initialization
		 * 
		 * Linking has 3 types
		 * 
		 * 1. verification:
		 * 
		 * It is the process of ensuring that binary representation of a class is structurally correct  or not
		 * e.g whether .class file is properly formated or not
		 * i.e whether .class file generated by valid compiler or not
		 * i.e whether .class file generated by valid compiler or not
		 * Internally ByteCode verifier is responsible for this activity, which is the part  of class loader
		 * if verification fails the we will get RE saying: javalang.verifyError
		 * 
		 *2. Preparation:
		 *It  this phase , jvm will allocate memory for class level static variables and assigned default values
		 *e.g for int --> 0
		 *    for double --> 0.0
		 *    for boolean --> false
		 *    Note: here just default vales will be assigned and original values will be assigned in initialization phase
		 *
		 *3. Resolution
		 *It is process of replacing an symbolic references used by the loaded type with original direct references from method area 
		 *Symbolic references are resolved into direct references by searching through method area to locate the referenced entity
		 *   
		 */
		String s1 = new String("Chaman");
		Student s2 = new Student();
		/*for above class, class loader subsystem loads
		 * like Linking.class,String.class,Student.classa and Object.class
		 * in method area
		 *  
		 * The names of these class are  stored in constant pool of Linking(our custom) class.
		 * 
		 * In resolution phase, these names are replaced with actual references from method area
		 * 
		 *3. Initialization:
		 * in this phase all static variables will be assigned with original values and 
		 * static blocks will be executed from top to bottom and from parent to child.
		 * Note:while loading,linking and initialization if any error occurs 
		 * then we will get runtime exception saying 
		 * java.lang.LinkageError. Of course VerifyError is child class of LinkageError only
		 * 
		 *
		 */
	}
}
